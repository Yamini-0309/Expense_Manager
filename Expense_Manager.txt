import { useState } from "react";
import {
  View,
  Text,
  Button,
  StyleSheet,
  TextInput,
  TouchableOpacity,
  ScrollView,
} from "react-native";

const ExpenseManager = () => {
  const [category, setCategory] = useState("Grocery");
  const [amount, setAmount] = useState("");
  const [income, setIncome] = useState("");
  const [expenses, setExpenses] = useState([]);
  const [currency, setCurrency] = useState("INR");
  const [totalExpenses, setTotalExpenses] = useState(0);
  const [balance, setBalance] = useState(0);
  const [showDropdown, setShowDropdown] = useState(false);
  const [showCurrencyDropdown, setShowCurrencyDropdown] = useState(false);

  const handleAddExpense = () => {
    const expenseAmount = parseFloat(amount);
    const newExpense = { category, amount: expenseAmount };
    setExpenses([...expenses, newExpense]);

    const newTotalExpenses = totalExpenses + expenseAmount;
    setTotalExpenses(newTotalExpenses);
    setBalance(parseFloat(income) - newTotalExpenses);

    setAmount("");
  };

  const handleCurrencyChange = (selectedCurrency) => {
    setCurrency(selectedCurrency);
    setShowCurrencyDropdown(false);
  };

  const toggleDropdown = () => {
    setShowDropdown(!showDropdown);
  };

  const toggleCurrencyDropdown = () => {
    setShowCurrencyDropdown(!showCurrencyDropdown);
  };

  const categoryExpenses = () => {
    const categoryExpenses = {};
    expenses.forEach((expense) => {
      if (categoryExpenses[expense.category]) {
        categoryExpenses[expense.category] += expense.amount;
      } else {
        categoryExpenses[expense.category] = expense.amount;
      }
    });
    return categoryExpenses;
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Expense Manager</Text>
      <View style={styles.inputContainer}>
        <TextInput
          style={styles.input}
          value={income}
          onChangeText={setIncome}
          placeholder="Enter Your Income"
          keyboardType="numeric"
        />
        <TouchableOpacity style={styles.dropdownButton} onPress={toggleCurrencyDropdown}>
          <Text style={styles.dropdownButtonText}>Currency: {currency}</Text>
        </TouchableOpacity>
        {showCurrencyDropdown && (
          <View style={styles.dropdown}>
            {["INR", "USD", "EUR"].map((curr) => (
              <TouchableOpacity key={curr} onPress={() => handleCurrencyChange(curr)}>
                <Text style={styles.dropdownOption}>{curr}</Text>
              </TouchableOpacity>
            ))}
          </View>
        )}
        <TouchableOpacity style={styles.dropdownButton} onPress={toggleDropdown}>
          <Text style={styles.dropdownButtonText}>Category: {category}</Text>
        </TouchableOpacity>
        {showDropdown && (
          <View style={styles.dropdown}>
            {["Grocery", "Utilities", "Transportation", "Entertainment"].map((cat) => (
              <TouchableOpacity key={cat} onPress={() => { setCategory(cat); setShowDropdown(false); }}>
                <Text style={styles.dropdownOption}>{cat}</Text>
              </TouchableOpacity>
            ))}
          </View>
        )}
        <TextInput
          style={styles.input}
          value={amount}
          onChangeText={setAmount}
          placeholder="Enter Expense Amount"
          keyboardType="numeric"
        />
        <Button title="Add Expense" onPress={handleAddExpense} />
      </View>

      <ScrollView style={styles.expenseList}>
        {expenses.map((expense, index) => (
          <View key={index} style={styles.expenseItem}>
            <Text style={styles.expenseText}>
              {expense.category}: {currency} {expense.amount.toFixed(2)}
            </Text>
          </View>
        ))}
      </ScrollView>

      <View style={styles.summaryContainer}>
        <View style={styles.summary}>
          <Text style={styles.summaryTitle}>Total Expenses:</Text>
          <Text style={styles.summaryValue}>{currency} {totalExpenses.toFixed(2)}</Text>
        </View>
        <View style={styles.summary}>
          <Text style={styles.summaryTitle}>Remaining Balance:</Text>
          <Text style={styles.summaryValue}>{currency} {balance.toFixed(2)}</Text>
        </View>

        <Text style={styles.summaryTitle}>Expenses by Category:</Text>
        {Object.keys(categoryExpenses()).map((cat) => (
          <View key={cat} style={styles.summary}>
            <Text style={styles.summaryCategory}>{cat}:</Text>
            <Text style={styles.summaryValue}>
              {currency} {categoryExpenses()[cat].toFixed(2)}
            </Text>
          </View>
        ))}
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#f8f8f8",
    alignItems: "center",
    padding: 20,
  },
  title: {
    fontSize: 28,
    fontWeight: "bold",
    color: "#333",
    marginBottom: 20,
  },
  inputContainer: {
    backgroundColor: "#fff",
    padding: 20,
    borderRadius: 15,
    width: "90%",
    marginBottom: 20,
    elevation: 3,
  },
  input: {
    height: 40,
    borderColor: "#ccc",
    borderWidth: 1,
    borderRadius: 8,
    marginBottom: 15,
    paddingHorizontal: 10,
  },
  dropdownButton: {
    backgroundColor: "#d1f7d6",
    padding: 10,
    borderRadius: 8,
    marginBottom: 15,
  },
  dropdownButtonText: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#2a9d8f",
  },
  dropdown: {
    backgroundColor: "#e1f4f3",
    borderColor: "#ccc",
    borderWidth: 1,
    padding: 10,
    borderRadius: 8,
    marginBottom: 10,
  },
  dropdownOption: {
    fontSize: 16,
    paddingVertical: 5,
    color: "#333",
  },
  expenseList: {
    width: "90%",
    marginBottom: 20,
  },
  expenseItem: {
    backgroundColor: "#ffe5d9",
    padding: 15,
    borderRadius: 8,
    marginBottom: 10,
  },
  expenseText: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
  },
  summaryContainer: {
    backgroundColor: "#ffffff",
    padding: 20,
    borderRadius: 15,
    width: "90%",
    elevation: 3,
  },
  summary: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginBottom: 10,
  },
  summaryTitle: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
  },
  summaryCategory: {
    flex: 1,
    fontSize: 16,
  },
  summaryValue: {
    fontSize: 16,
    color: "#2a9d8f",
    fontWeight: "bold",
  },
});

export default ExpenseManager;
